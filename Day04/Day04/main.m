//
//  main.m
//  Day04
//
//  Created by Li, Chenxi on 3/21/21.
//  Copyright © 2021 Li, Chenxi. All rights reserved.
//
/**
 1. xcode文档的安装
    苹果提供了很多很多的框架，框架中有很多类很多函数很多数据类型。
    遇到的问题：
    a 你如何知道到底有哪些框架
    b 框架中到底有哪些类
    c 类中有哪些方法
    d 如何调用这些方法
 
    所有的这一切，苹果提供xcode文档，详细描述了这些信息。
 
 2. c语言中的static
    a 可以修护局部变量
    b 可以修饰全局变量
    c 可以修饰函数
 
   oc中的static
    a 不能修饰属性也不能修饰方法
    b 可以修饰方法中的局部变量，如果方法中的局部变量被static修饰，这个变量就会被变成静态变量，第一次声明存储在常量区，方法结束后变量也不会被回收，下次再执行这个方法时， 不用声明直接使用。
    c 如果返回值时当前类对象，用instancetype作为返回值的type
    d 例子：学生编号，不让外界来指定，而是第一个学生编号为1，每生成一个学生就编号++，就可以把编号变量设置成static放在在constructor里，这样下次调用constructor时编号不会消失且自动++。
 
 3. self关键字: self是一个指针，在对象方法中self指向当前对象，在类方法中self指向当前类
    a 方法的内部可以定义一个和属性名相同的局部变量，但是容易和属性搞混，如果在方法访问这个同名的变量，访问的是局部变量。所以要用self->_name (如果没有同名局部变量，用不用self结果都一样）
    b 如何调用其他对象方法？不用创建新的对象，只需要调用当前对象的对象方法，用self
    c 在类方法中应用self的例子。
        1 类的加载：当类第一次被访问时，会把类的代码存在代码区，代码区中用来存储类的空间，也有一个地址。
        2 在类方法中，self也是一个指针， 这个指针指向类在代码段中的地址
        3. 有什么用：可以在类方法中使用self来显式地调用本类的其他类方法，使用建议：如果要调用本类的其他类方法，虽然可以z直接使用，建议通过self
    d 总结一下取到类在代码段中地址的方式
        1 调试查看对象isa指针的值
        2 在类方法中查看self值
        3 调用对象的对象方法class，就会返回这个对象所属的类在代码段中的地址
        4 调用类方法class，也会返回这个类在代码段中的地址
 
    e ⚠️注意：
        1 在对象方法中，self代表当前对象，不能用self调用本类的类方法
        2 在类方法中，self代表当前的类，不能用self调用本类的对象方法or属性
 
 4. 类方法和对象方法是可以重名的
        1. 对象方法可以声明多次，但只会认为有一次 - 对象方法之间不能重名
        2. 类方法之间也不可以重名
        3. 但是，对象方法和类方法是可以重名的。通过类名调用调用的就是类方法，通过对象来调调的就是对象方法。
 
 5. 继承
    目的：子类想拥有父类中所有成员，但是不想定义，而想直接拥有。
    语法：
        @interface 类名 ： 父类名称 (在创建类的时候指定父类会自动生成代码）
    效果：子类拥有父类中所有成员和方法，不用自己定义。
    应用场景：如果发现另外一个类当中的成员我也想有，就可以使用继承。但是不要乱继承，不要为了继承而继承，只有满足isA关系才可以继承
    ⚠️注意：如果一个成员不是所有子类都拥有的，就不要定义在父类中，父类中只定义所有子类都拥有的。
           子类中不能存在和父类同名的属性。
 
 6. OC继承的特点
    1 单根性：只能有一个父类
    2 传递性：a类从b类继承，b类从c类继承，那么a同时拥有b，c类成员。
    3 NSObject类：是Foundation框架中的类，这个类只有一个方法，new
               new这个方法是用来创建对象的，方法返回值是创建这个对象的指针。如果想让类具备创建对象的能力，就必须继承自NSObject类，我们写的类必须直接或间接的从NSObject继承。（NSObject是oc中所有类的父类）
               在NSObject类中，还定义了一个属性，属性叫做isa指针，所以每个子类对象都有一个isa指针。isa指向类在代码区的地址。
 7. super关键字
    1. 可以用在类方法和对象方法之中。
    2. 在对象方法当中，可以用super关键字来调用从父类继承的对象方法。
    3. super只能用来调用父类对象方法或类方法，不能用来访问属性。
 
 8. 访问修饰符：用来修饰属性。限定对象的属性在哪一段范围内访问
            @private：只能在本类的内部访问，子类依然可以继承父类的私有属性，但是在子类中无法直接访问从父类继承过来的私有属性，但你还是可以通过调用父类的getter/setter属性来为它赋值
            @protected：受保护的，只能在本类和本类的子类中访问
            @package：可以在当前框架中访问
            @public：公共的，可以在任意地方访问
            如果不为属性置顶访问修饰符，默认是@protected
            访问修饰符的作用域：作用于一直往下数，直到遇到新的修饰符或者结束大括号为止。
            使用建议： 1. 无论什么情况下都不要使用public，属性不要直接暴露给外界。
                    2. 如果属性只想在本类中使用，不想在子类中使用，用private
                    3. 属性只在本类和子类中使用，用protected（default推荐）
                    4. 访问修饰符只能用来修饰属性，不能用来修饰方法
 9. 私有方法：只写实现，不写声明，就自动变成私有方法，外部不可见。
 10. 里氏替换原则（lsp）：子类可以替换父类的位置，且程序的功能不受影响。因为父类中拥有的成员子类都有，不会影响程序性能。
              Person *p = [Student new]
            作用：
                1. 1个指针中不仅可以存储本类对象的地址，还可以存储子类对象的地址。
                2. 如果一个指针的类型是nsobject类型的，这个指针中可以存储任意oc对象的地址。
                3. 如果一个数组的元素的类型是1个oc指针类型，那么这个数组中不仅可以存储本类对象，还可以存储子类对象。
                4. 如果数组元素是nsobject指针类型，意味着任意oc对象地址都可以存在这个数组中。
                5. 如果一个方法的参数是一个对象，那么我们在为这个参数传值的时候，可以传递本类对象，也可以传递子类对象。
            ⚠️重要：当一个父类指针指向一个子类对象的时候，通过这个父类指针只能去调用子类对象的父类成员，子类独有的成员无法访问。
 11. 方法的重写:
        a 子类继承了父类的方法，但是有时子类的行为具体实现和父类不一样，那就重写。
        b 直接在类的实现中将这个方法重新实现一遍就可以了（不实现就默认用父类的实现）。
        c 当一个父类指针指向一个子类对象的时候，通过这个父类指针调用的方法，如果子类对象中重写了方法，调用的就是子类重写后的方法。
 
 12. 多态：指的是1个 行为，对于不同事物具有完全不同的表现形式，同一行为具有多种形态。
 13. Description:
        %p 打印指针变量的值
        %@ 打印指针指向的对象：输出的格式是<类名： 对象的地址>
            %@的实现原理：1.调用传入对象的description方法 （是NSObject定义的方法）
                        2. 拿到方法返回值（一个字符串），将字符串输出
            重写description方法：（相当于overiride java类的tostring方法）
                        
 
 */

#import <Foundation/Foundation.h>

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // insert code here...
        NSLog(@"Hello, World!");
    }
    return 0;
}
